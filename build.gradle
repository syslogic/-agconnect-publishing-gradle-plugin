// :buildSrc
buildscript {
    ext {
        github_handle = 'syslogic'
        plugin_display_name = 'AppGallery Connect Publishing Plugin'
        plugin_description = 'It uploads to Huawei AppGallery Connect Publishing API'
        plugin_identifier = 'agconnect-publishing-gradle-plugin'
        plugin_class = 'io.syslogic.agconnect.PublishingPlugin'
        plugin_id = 'io.syslogic.agconnect.publishing'
        agp_version = '8.0.2'
        plugin_version = '24'
    }
}

plugins {
    id 'org.gradle.java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.2.0'
}

dependencies {

    compileOnly gradleApi()
    implementation "com.android.tools.build:gradle-api:${agp_version}"
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.apache.httpcomponents:httpcore:4.4.15'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpmime:4.5.6'
    implementation 'org.jetbrains:annotations:22.0.0'

    testImplementation gradleTestKit()
    testImplementation 'org.jetbrains:annotations:22.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation(project)
}

gradlePlugin {
    plugins {
        PublishingPlugin {
            id = "${plugin_id}"
            displayName = "${plugin_display_name}"
            description = "${plugin_description}"
            implementationClass = "${plugin_class}"
        }
    }
}

tasks.withType(Jar).configureEach {
    archiveBaseName.set(plugin_identifier)
    archiveVersion.set("${agp_version}.${plugin_version}")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

task javadocs(type: Javadoc) {
    title = "AppGallery Connect Publishing Plugin ${agp_version} API"
    source = java.sourceSets.main.java.srcDirs
    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    configurations.implementation.setCanBeResolved(true)
    classpath = files(new File(System.getProperty('java.home') + File.separator + 'lib' + File.separator + 'rt.jar'))
    classpath += configurations.implementation
    options.links "https://docs.oracle.com/en/java/javase/17/docs/api/"
    options.linkSource true
    options.author true
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from java.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

group = 'io.syslogic'
version = "${agp_version}.${plugin_version}"
artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = group
                artifactId = "${plugin_identifier}"
                from components.getByName("java")
                version = "${agp_version}.${plugin_version}"
                pom {
                    name = "${plugin_display_name}"
                    description = "${plugin_description}"
                    url = "https://github.com/${github_handle}/${plugin_identifier}"
                    scm {
                        connection = "scm:git:git://github.com/${github_handle}/${plugin_identifier}.git"
                        developerConnection = "scm:git:ssh://github.com/${github_handle}/${plugin_identifier}.git"
                        url = "https://github.com/${github_handle}/${plugin_identifier}/"
                    }
                }
            }
        }
    }
}
